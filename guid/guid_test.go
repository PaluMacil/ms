package guid

import (
	"bytes"
	"testing"
)

func TestIsEqualTo(t *testing.T) {
	guid1 := GUID{
		[]byte{0x6b, 0xa7, 0xb8, 0x10}, []byte{0x6b, 0xa7}, []byte{0x80, 0xb4}, []byte{0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30},
	}
	guid2 := GUID{
		[]byte{0x6b, 0xa7, 0xb8, 0x10}, []byte{0x6b, 0xa7}, []byte{0x80, 0xb4}, []byte{0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30},
	}
	guid3 := GUID{
		[]byte{0x9d, 0xad, 0x11, 0xd1}, []byte{0x6b, 0xb4}, []byte{0x80, 0xb4}, []byte{0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30},
	}
	guid4 := GUID{
		[]byte{0x6b, 0xa7, 0xb8, 0x10}, []byte{0x6b, 0xa7}, []byte{0x80, 0xb4}, []byte{0xd1, 0x80, 0xb4, 0x00, 0xc0},
	}

	if !guid1.IsEqualTo(guid2) {
		t.Errorf("guids should have been equal")
	}
	if guid1.IsEqualTo(guid3) {
		t.Errorf("guids were not equal (different bytes)")
	}
	if guid1.IsEqualTo(guid4) {
		t.Errorf("guids were not equal (second guid had a shorter group4 slice)")
	}
}

func TestParseRawBytes(t *testing.T) {
	// Test that dashes are removed before parsing
	_, err := ParseRawBytes([]byte{0x6b, 0xa7, 0xb8, 0x10, 0x2D, 0x9d, 0xad, 0x2D, 0x11, 0xd1, 0x2D, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8})
	if err != nil {
		t.Error(err)
	}

	// Test err if byte slice too short
	_, err = ParseRawBytes([]byte{0x9d, 0xad, 0x11, 0xd1, 0x80})
	if err == nil {
		t.Errorf("ParseRawBytes did not throw an error when the byte slice was too short")
	}

	b := []byte{0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}
	guid1 := GUID{
		[]byte{0x6b, 0xa7, 0xb8, 0x10}, []byte{0x9d, 0xad}, []byte{0x11, 0xd1}, []byte{0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8},
	}

	g, err := ParseRawBytes(b)
	if err != nil {
		t.Error(err)
	}
	if len(g.group1) != 4 || len(g.group2) != 2 || len(g.group3) != 2 || len(g.group4) != 8 {
		t.Errorf("GUID %v has incorrect group lengths of %v %v %v and %v", g, len(g.group1), len(g.group2), len(g.group3), len(g.group4))
	}
	if !g.IsEqualTo(guid1) {
		t.Errorf("GUID %v doesn't match matching guid %v", g, guid1)
	}
}

func TestMustParseRawBytes(t *testing.T) {
	// Test panic if byte slice too short
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("the code did not panic on a bad format byte slice")
		}
	}()
	MustParseRawBytes([]byte{0x9d, 0xad, 0x11, 0xd1, 0x80})
}

func TestUUIDBytes(t *testing.T) {
	uuid := []byte{0x10, 0xb8, 0xa7, 0x6b, 0xad, 0x9d, 0xd1, 0x11, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}
	guid1 := GUID{
		[]byte{0x6b, 0xa7, 0xb8, 0x10}, []byte{0x9d, 0xad}, []byte{0x11, 0xd1}, []byte{0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8},
	}

	if !bytes.Equal(uuid, guid1.UUIDBytes()) {
		t.Errorf("UUIDs do not match")
	}
}
