package guid

import "testing"

func TestIsEqual(t *testing.T) { /*
		b1 := []byte{0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}
		b2 := []byte{0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}
		b3 := []byte{0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}
		b4 := []byte{0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}*/
}

func TestParseRawBytes(t *testing.T) {
	// Test groups
	//b := []byte{0x6b, 0xa7, 0xb8, 0x10, 0x9d, 0xad, 0x11, 0xd1, 0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8}

	// Test err if byte slice too short
	_, err := ParseRawBytes([]byte{0x9d, 0xad, 0x11, 0xd1, 0x80})
	if err == nil {
		t.Errorf("ParseRawBytes did not throw an error")
	}
}

func TestMustParseRawBytes(t *testing.T) {
	// Test panic if byte slice too short
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	MustParseRawBytes([]byte{0x9d, 0xad, 0x11, 0xd1, 0x80})
}

func TestUUIDBytes(t *testing.T) {

}
